#!/usr/bin/env python

import BaseHTTPServer
import cgi
import datetime
import eyed3
import os
import shutil
import subprocess
import time
import urllib
import urlparse

NEW_PATH = "@@@@@1@@@@@"
LISTENED_PATH = "@@@@@2@@@@@"
NEW_URL = "/new"
LISTENED_URL = "/listened"
DOWNLOAD_SCRIPT = "@@@@@3@@@@@"
PODCAST_LOCK = "@@@@@4@@@@@"
DOWNLOAD_LOG = "@@@@@5@@@@@"
DOWNLOAD_COUNT = "@@@@@6@@@@@"
WEBPAGE_HEADER = "@@@@@7@@@@@"
WEBPAGE_FOOTER = "@@@@@8@@@@@"
# Though this is really an int, we keep it as a string here so the linter
# doesn't complain about the template @s
PORT = "@@@@@9@@@@@"

children = []


class Responder(BaseHTTPServer.BaseHTTPRequestHandler):
    def reap(self):
        i = 0
        while i < len(children):
            if children[i].poll() is not None:
                children[i].wait()
                del children[i]
            else:
                i += 1

    def construct_response(self, title, body):
        page = u""
        try:
            with open(WEBPAGE_HEADER) as f:
                page += unicode(f.read())
            page = page.replace(u"#####1#####", unicode(title))
        except IOError:
            page += (u'<html><head><meta charset="utf-8">'
                     "<title>%s</title></head><body>") % unicode(title)

        page += (u"<div class=\"container\"><div class=\"row\">" +
                 unicode(body) + u"</div></div>")

        try:
            with open(WEBPAGE_FOOTER) as f:
                page += unicode(f.read())
        except IOError:
            page += u"</body></html>"

        return page.encode("utf-8")

    def respond(self, title, body):
        self.reap()
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(self.construct_response(title, body))

    def fail(self):
        self.reap()
        self.send_response(404)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(
            self.construct_response(
                "Error",
                "<h1>Error!</h1><p>The requested page could not be found</p>"))

    def is_busy(self):
        return os.path.exists(PODCAST_LOCK)

    def respond_busy(self):
        self.reap()
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(
            self.construct_response(
                "Downloading podcasts",
                ("<h1>Downloading podcasts</h1>\n"
                 "<p>Currently downloading any new podcasts. This might take a"
                 " while.</p>\n"
                 "<p>This page will go back to normal once the download is"
                 " finished (you can close the page in the meantime, if you"
                 " like).</p>\n"
                 '<script type="text/javascript">\n'
                 '  setTimeout(function() { window.location = "/"; }, 5000);\n'
                 "</script>\n")))

    def last_download_count(self):
        try:
            with open(DOWNLOAD_COUNT) as f:
                num = f.read().strip()
            when = datetime.datetime.fromtimestamp(
                os.path.getmtime(DOWNLOAD_COUNT))
            return ("<p>Downloaded %s file%s on %s at %s.</p>"
                    % (num,
                       "s" if int(num) > 1 else "",
                       when.strftime("%d/%m/%Y"),
                       when.strftime("%H:%M")))
        except:
            return ""

    def main_page(self):
        self.respond(
            "Podcasts",
            ("<h1>Podcasts</h1>\n"
             "%s\n"
             '<p><a href="%s">Podcasts - new</a></p>\n'
             '<p><a href="%s">Podcasts - listened</a></p>\n'
             '<form action="/" method="post">\n'
             '<button class="btn btn-default" type="submit" name="download" '
             'value="download">Check for new episodes</button>\n'
             "</form>\n") % (self.last_download_count(),
                             NEW_URL,
                             LISTENED_URL))

    def parse_POST(self):
        ctype, pdict = cgi.parse_header(self.headers["content-type"])
        if ctype == "multipart/form-data":
            postvars = cgi.parse_multipart(self.rfile, pdict)
        elif ctype == "application/x-www-form-urlencoded":
            length = int(self.headers["content-length"])
            postvars = urlparse.parse_qs(self.rfile.read(length),
                                         keep_blank_values=1)
        else:
            postvars = {}
        return postvars

    def pretty_print(self, podcast_dir, filename):
        try:
            mp3 = eyed3.load(os.path.join(podcast_dir, filename))
            if mp3 and mp3.tag and mp3.tag.title:
                s = "<em>%s</em>" % mp3.tag.title
                if mp3.tag.artist:
                    s += ", %s" % mp3.tag.artist
                s += " (%s)" % filename
                return s
            else:
                return filename
        except Exception:
            return filename

    def list_files(self, src, title, url, num_moved, errors, move_text):
        body = '<p><a href="/">Back to podcasts</a></p>\n<h1>%s</h1>\n' % title
        if num_moved:
            body += ('<div class="alert alert-success" roles="alert">Moved %s '
                     'file%s</div>') % (num_moved,
                                        "s" if num_moved > 1 else "")
        if errors:
            body += ('<div class="alert alert-danger" roles="alert"><p>%s '
                     'error%s:</p>') % (len(errors),
                                        "s" if len(errors) > 1 else "")
            for err in errors:
                body += "<p>%s</p>" % err
            body += "</div>"
        body += """<form action="%s" method="post">""" % url

        for podcast in sorted(os.listdir(src)):
            podcast_dir = os.path.join(src, podcast)
            if os.path.isdir(podcast_dir):
                episodes = sorted(os.listdir(podcast_dir))
                if episodes:
                    body += "<h2>%s</h2>" % podcast
                    for episode in episodes:
                        name = urllib.pathname2url("%s/%s" % (podcast,
                                                              episode))
                        pretty = self.pretty_print(podcast_dir, episode)
                        body += ('<div class="checkbox"><input type="checkbox"'
                                 ' id="%s" name="%s"><label for="%s">%s'
                                 '</label></div>') % (name, name, name, pretty)

        body += ('<button class="btn btn-default" type="submit">Mark selected '
                 'as %s</button></form>') % move_text

        self.respond(title, body)

    def list_new(self, num_moved=0, errors=[]):
        self.list_files(NEW_PATH,
                        "Podcasts - new",
                        NEW_URL,
                        num_moved,
                        errors,
                        "listened")

    def list_listened(self, num_moved=0, errors=[]):
        self.list_files(LISTENED_PATH,
                        "Podcasts - listened",
                        LISTENED_URL,
                        num_moved,
                        errors,
                        "not listened")

    def move_files(self, src, dst, post_data):
        files = map(urllib.url2pathname, post_data.keys())

        num_moved = 0
        errors = []

        for f in files:
            try:
                parts = f.split("/")
                if (not f or
                    os.path.isabs(f) or
                    len(parts) != 2 or
                    parts[0] == ".." or
                    parts[0] == "." or
                    parts[1] == ".." or
                    parts[1] == "."):  # noqa
                    raise Exception("Filename '%s' is invalid." % f)

                srcdir = os.path.join(src, parts[0])
                srcfile = os.path.join(srcdir, parts[1])
                dstdir = os.path.join(dst, parts[0])
                dstfile = os.path.join(dstdir, parts[1])

                if not os.path.isfile(srcfile):
                    raise Exception("File '%s' does not exist." % srcfile)
                elif os.path.exists(dstfile):
                    raise Exception("File '%s' already exists." % dstfile)

                if not os.path.exists(dstdir):
                    os.mkdir(dstdir)

                shutil.move(srcfile, dstfile)

                if not os.listdir(srcdir):
                    os.rmdir(srcdir)

                num_moved += 1
            except Exception as e:
                errors.append(str(e))

        return num_moved, errors

    def start_download(self):
        children.append(subprocess.Popen([DOWNLOAD_SCRIPT]))
        time.sleep(1)
        self.respond_busy()

    def do_GET(self):
        if self.is_busy():
            self.respond_busy()
        elif self.path == "/":
            self.main_page()
        elif self.path == NEW_URL:
            self.list_new()
        elif self.path == LISTENED_URL:
            self.list_listened()
        else:
            self.fail()

    def do_POST(self):
        if self.is_busy():
            self.respond_busy()
        elif self.path == "/":
            if "download" in self.parse_POST():
                self.start_download()
            else:
                self.main_page()
        elif self.path == NEW_URL:
            moved, errors = self.move_files(NEW_PATH,
                                            LISTENED_PATH,
                                            self.parse_POST())
            self.list_new(moved, errors)
        elif self.path == LISTENED_URL:
            moved, errors = self.move_files(LISTENED_PATH,
                                            NEW_PATH,
                                            self.parse_POST())
            self.list_listened(moved, errors)
        else:
            self.fail()

server_address = ('', int(PORT))
httpd = BaseHTTPServer.HTTPServer(server_address, Responder)
httpd.serve_forever()
