#!/bin/bash

export CA_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.." &&

printf "Enter the certificate's name: " &&
read CERT_NAME &&

if [ -z "${CERT_NAME}" ]; then
    echo "Certificate name must not be empty"
    exit 1
fi

printf "Enter the password for the root CA key: " &&
read -s PASSWD &&
echo &&


printf "Enter the password for the new PKCS#12 file: " &&
read -s PKCS_PASSWD &&
echo &&

printf "Enter the new PKCS#12 password again: " &&
read -s PKCS_PASSWD2 &&
echo &&

if [ "${PKCS_PASSWD}" != "${PKCS_PASSWD2}" ]; then
    echo "The passwords do not match"
    exit 1
fi


CERT_DIR="${CA_DIR}/certs/client/${CERT_NAME}__$(date '+%Y_%m_%d_%H_%M_%S')" &&
mkdir -p "${CERT_DIR}" &&

# Certificate request
openssl req -config "${CA_DIR}/openssl.conf" -new -subj "/C=GB/O=Callum J. Cameron/CN=${CERT_NAME}" -newkey rsa -keyout "${CERT_DIR}/${CERT_NAME}.key" -out "${CERT_DIR}/${CERT_NAME}.csr" -outform PEM -nodes &&


# Sign
exec 3<<EOF
${PASSWD}
EOF

openssl ca -config "${CA_DIR}/openssl.conf" -in "${CERT_DIR}/${CERT_NAME}.csr" -out "${CERT_DIR}/${CERT_NAME}.crt" -outdir "${CA_DIR}/data" -batch -passin fd:3 &&


# Make PKCS#12 file
exec 3<<EOF
${PKCS_PASSWD}
EOF

openssl pkcs12 -export -out "${CERT_DIR}/${CERT_NAME}.p12" -in "${CERT_DIR}/${CERT_NAME}.crt" -inkey "${CERT_DIR}/${CERT_NAME}.key" -name "${CERT_NAME}" -passin pass: -passout fd:3 &&


# Cleanup
rm "${CERT_DIR}/${CERT_NAME}.csr" &&
chmod u=r "${CERT_DIR}/${CERT_NAME}.key" "${CERT_DIR}/${CERT_NAME}.crt" "${CERT_DIR}/${CERT_NAME}.p12" &&
chmod go=r "${CERT_DIR}/${CERT_NAME}.crt" &&
chmod go-rwx "${CERT_DIR}/${CERT_NAME}.key" "${CERT_DIR}/${CERT_NAME}.p12" &&
cp "${CA_DIR}/ca/ca.crt" "${CERT_DIR}"
