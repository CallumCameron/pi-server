#!/usr/bin/env python

import BaseHTTPServer
import cgi
import eyed3
import os
import shutil
import subprocess
import sys
import time
import urllib
import urlparse

NEW_PATH = "@@@@@1@@@@@"
LISTENED_PATH = "@@@@@2@@@@@"
NEW_URL = "/new"
LISTENED_URL = "/listened"
DOWNLOAD_SCRIPT = "@@@@@3@@@@@"
PODCAST_LOCK = "@@@@@4@@@@@"
DOWNLOAD_LOG = "@@@@@5@@@@@"
DOWNLOAD_COUNT = "@@@@@6@@@@@"


class Responder(BaseHTTPServer.BaseHTTPRequestHandler):
    def __init__(self):
        super(BaseHTTPServer.BaseHTTPRequestHandler, self)
        self.children = []

    def reap(self):
        i = 0
        while i < len(self.children):
            if self.children[i].poll() is not None:
                self.children[i].wait()
                del self.children[i]
            else:
                i += 1

    def respond(self, title, body):
        self.reap()
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write((u"<html><head><meta charset=\"utf-8\"><title>%s</title></head><body>%s</body></html>" % (title, body)).encode("utf-8"))

    def fail(self):
        self.reap()
        self.send_response(404)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write((u"<html><head><meta charset=\"utf-8\"><title>Page not found</title></head><body>Page not found.</body></html>").encode("utf-8"))

    def is_busy(self):
        return os.path.exists(PODCAST_LOCK)

    def respond_busy(self):
        self.respond("Download in progress", "<p>Podcasts are currently being downloaded.</p>")

    def last_download_count(self):
        try:
            with open(DOWNLOAD_COUNT) as f:
                num = f.read().strip()
            when = datetime.fromtimestamp(os.path.getmtime(DOWNLOAD_COUNT))
            return "<p>Last download: %s files at %s</p>" % (num, when)
        except:
            return ""

    def main_page(self):
        self.respond("Podcasts", "<h1>Podcasts</h1>%s<p><a href=\"%s\">New podcasts</a></p><p><a href=\"%s\">Listened podcasts</a></p><form action=\"/\" method=\"post\"><button type=\"submit\" name=\"download\" value=\"download\">Check for new episodes</button></form>" % (self.last_download_count(), NEW_URL, LISTENED_URL))

    def parse_POST(self):
        ctype, pdict = cgi.parse_header(self.headers["content-type"])
        if ctype == "multipart/form-data":
            postvars = cgi.parse_multipart(self.rfile, pdict)
        elif ctype == "application/x-www-form-urlencoded":
            length = int(self.headers["content-length"])
            postvars = urlparse.parse_qs(self.rfile.read(length), keep_blank_values=1)
        else:
            postvars = {}
        return postvars

    def pretty_print(self, podcast_dir, filename):
        try:
            mp3 = eyed3.load(os.path.join(podcast_dir, filename))
            if mp3 and mp3.tag and mp3.tag.title:
                s = "<em>%s</em>" % mp3.tag.title
                if mp3.tag.artist:
                    s += ", %s" % mp3.tag.artist
                s += " (%s)" % filename
                return s
            else:
                return filename
        except Exception:
            return filename

    def list_files(self, src, title, url, num_moved, errors):
        body = "<p><a href=\"/\">Home</a></p><h1>%s</h1>" % title
        if num_moved:
            body += "<p>Moved %s files</p>" % num_moved
        if errors:
            body += "<p>%s errors:</p>" % len(errors)
            for err in errors:
                body += "<p>%s</p>" % err
        body += "<form action=\"%s\" method=\"post\">" % url

        for podcast in sorted(os.listdir(src)):
            podcast_dir = os.path.join(src, podcast)
            if os.path.isdir(podcast_dir):
                episodes = sorted(os.listdir(podcast_dir))
                if episodes:
                    body += "<h2>%s</h2>" % podcast
                    for episode in episodes:
                        name = urllib.pathname2url("%s/%s" % (podcast, episode))
                        pretty = self.pretty_print(podcast_dir, episode)
                        body += "<p><input type=\"checkbox\" id=\"%s\" name=\"%s\"><label for=\"%s\">%s</label></p>" % (name, name, name, pretty)

        body += "<button type=\"submit\">Move files</button></form>"

        self.respond(title, body)

    def list_new(self, num_moved=0, errors=[]):
        self.list_files(NEW_PATH, "New podcasts", NEW_URL, num_moved, errors)

    def list_listened(self, num_moved=0, errors=[]):
        self.list_files(LISTENED_PATH, "Listened podcasts", LISTENED_URL, num_moved, errors)

    def move_files(self, src, dst, post_data):
        files = map(urllib.url2pathname, post_data.keys())

        num_moved = 0
        errors = []

        for f in files:
            try:
                parts = f.split("/")
                if (not f
                    or os.path.isabs(f)
                    or len(parts) != 2
                    or parts[0] == ".."
                    or parts[0] == "."
                    or parts[1] == ".."
                    or parts[1] == "."):
                    raise Exception("Filename '%s' is invalid." % f)

                srcfile = os.path.join(src, parts[0], parts[1])
                dstdir = os.path.join(dst, parts[0])
                dstfile = os.path.join(dstdir, parts[1])

                if not os.path.isfile(srcfile):
                    raise Exception("File '%s' does not exist." % srcfile)
                elif os.path.exists(dstfile):
                    raise Exception("File '%s' already exists." % dstfile)

                if not os.path.exists(dstdir):
                    os.mkdir(dstdir)

                shutil.move(srcfile, dstfile)
                num_moved += 1
            except Exception as e:
                errors.append(str(e))

        return num_moved, errors

    def start_download(self):
        self.children.append(subprocess.Popen([DOWNLOAD_SCRIPT]))
        time.sleep(1)
        self.respond_busy()

    def do_GET(self):
        if self.is_busy():
            self.respond_busy()
        elif self.path == "/":
            self.main_page()
        elif self.path == NEW_URL:
            self.list_new()
        elif self.path == LISTENED_URL:
            self.list_listened()
        else:
            self.fail()

    def do_POST(self):
        if self.is_busy():
            self.respond_busy()
        elif self.path == "/":
            if "download" in self.parse_POST():
                self.start_download()
            else:
                self.main_page()
        elif self.path == NEW_URL:
            moved, errors = self.move_files(NEW_PATH, LISTENED_PATH, self.parse_POST())
            self.list_new(moved, errors)
        elif self.path == LISTENED_URL:
            moved, errors = self.move_files(LISTENED_PATH, NEW_PATH, self.parse_POST())
            self.list_listened(moved, errors)
        else:
            self.fail()

server_address = ('', 23146)
httpd = BaseHTTPServer.HTTPServer(server_address, Responder)
httpd.serve_forever()
